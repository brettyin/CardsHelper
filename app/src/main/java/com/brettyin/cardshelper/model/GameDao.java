package com.brettyin.cardshelper.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.brettyin.cardshelper.model.Game;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GAME.
*/
public class GameDao extends AbstractDao<Game, Long> {

    public static final String TABLENAME = "GAME";

    /**
     * Properties of entity Game.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Score = new Property(1, Integer.class, "Score", false, "SCORE");
        public final static Property Group = new Property(2, Integer.class, "Group", false, "GROUP");
        public final static Property Nr = new Property(3, Integer.class, "Nr", false, "NR");
        public final static Property Date = new Property(4, java.util.Date.class, "Date", false, "DATE");
    };

    private DaoSession daoSession;


    public GameDao(DaoConfig config) {
        super(config);
    }
    
    public GameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GAME' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SCORE' INTEGER," + // 1: Score
                "'GROUP' INTEGER," + // 2: Group
                "'NR' INTEGER," + // 3: Nr
                "'DATE' INTEGER);"); // 4: Date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GAME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Game entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer Score = entity.getScore();
        if (Score != null) {
            stmt.bindLong(2, Score);
        }
 
        Integer Group = entity.getGroup();
        if (Group != null) {
            stmt.bindLong(3, Group);
        }
 
        Integer Nr = entity.getNr();
        if (Nr != null) {
            stmt.bindLong(4, Nr);
        }
 
        java.util.Date Date = entity.getDate();
        if (Date != null) {
            stmt.bindLong(5, Date.getTime());
        }
    }

    @Override
    protected void attachEntity(Game entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Game readEntity(Cursor cursor, int offset) {
        Game entity = new Game( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // Score
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Group
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // Nr
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // Date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Game entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScore(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setGroup(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setNr(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Game entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Game entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
