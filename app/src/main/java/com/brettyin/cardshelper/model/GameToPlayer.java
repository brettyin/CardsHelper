package com.brettyin.cardshelper.model;

import com.brettyin.cardshelper.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table GAME_TO_PLAYER.
 */
public class GameToPlayer {

    private long gameId;
    private Long playerId;
    private Integer Status;
    private Integer Level;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GameToPlayerDao myDao;

    private Player player;
    private Long player__resolvedKey;


    public GameToPlayer() {
    }

    public GameToPlayer(long gameId, Long playerId, Integer Status, Integer Level) {
        this.gameId = gameId;
        this.playerId = playerId;
        this.Status = Status;
        this.Level = Level;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGameToPlayerDao() : null;
    }

    public long getGameId() {
        return gameId;
    }

    public void setGameId(long gameId) {
        this.gameId = gameId;
    }

    public Long getPlayerId() {
        return playerId;
    }

    public void setPlayerId(Long playerId) {
        this.playerId = playerId;
    }

    public Integer getStatus() {
        return Status;
    }

    public void setStatus(Integer Status) {
        this.Status = Status;
    }

    public Integer getLevel() {
        return Level;
    }

    public void setLevel(Integer Level) {
        this.Level = Level;
    }

    /** To-one relationship, resolved on first access. */
    public Player getPlayer() {
        Long __key = this.playerId;
        if (player__resolvedKey == null || !player__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlayerDao targetDao = daoSession.getPlayerDao();
            Player playerNew = targetDao.load(__key);
            synchronized (this) {
                player = playerNew;
            	player__resolvedKey = __key;
            }
        }
        return player;
    }

    public void setPlayer(Player player) {
        synchronized (this) {
            this.player = player;
            playerId = player == null ? null : player.getId();
            player__resolvedKey = playerId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
